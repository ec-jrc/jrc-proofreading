'
' ===========================================================================
'                         © European Commission 2023

' Licensed under the EUPL, Version 1.2 or – as soon they will be approved by
' the European Commission – subsequent versions of the EUPL (the "Licence");
' You may not use this work except in compliance with the Licence.
' You may obtain a copy of the Licence at:
'     https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
' Unless required by applicable law or agreed to in writing, software
' distributed under the Licence is distributed on an "AS IS" basis,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the Licence for the specific language governing permissions and
' limitations under the Licence.
'
'                Report bugs to: david.anderson@ec.europa.eu
' ===========================================================================
'
'
'   Version History:
'
'   2.7     10/04/2023  Added switch for tracked changes: TrackChanges = True
'                       (To deactivate, replace with: TrackChanges = False)
'
'   2.6     09/04/2023  Final message box only shown if text > 1000 characters.
'                       Added switch for highlighting: HighlightFormulae = True
'                       (To deactivate, replace with: HighlightFormulae = False)
'
'   2.5     28/11/2022  Squashed bug: reset Selection.Find.Highlight
'
'   2.4     27/11/2022  Squashed small bugs: semi-colons, uneven brackets,
'                       isotope notation <element>-<A>, e.g. Ra-226,
'                       and oxidation states in parentheses, e.g. Cr(III)
'
'   2.3     06/06/2022  Using tracked changes instead of red font colour.
'                       Added ignore hyperlinks.
'
'   2.2     16/05/2022  EUPL license text added.
'
'   2.1     25/03/2022  Added aqueous ions and Lanthanide ions
'
'   2.0     24/03/2022  Added boolean switches to turn on/off checking
'                       of oxidation states, and to control elements V & I.
'                       Version number updated to major new version.
'
'   1.7     22/03/2022  Split code into smaller routines
'
'   1.6     14/03/2022  Added isotropically specifically labelled compounds
'                           (e.g. [32P]Cl3)
'
'   1.5     28/02/2022  Reorganised progamming flow of detection tests
'                       Small bugs squashed
'
'   1.4     27/02/2022  Added Roman numerals for oxidation states
'
'   1.3     26/02/2022  Added geometrical and structural affixes
'                          (e.g. cis-, trans-)
'                       Micron (Mu symbol) = coordination centres bridge
'                          (e.g. [(H3N)5Cr(Mu-OH)Cr(NH3)5]5+)
'                       Added ligand abbreviations
'                          (e.g. en, acac, dmso)
'
'   1.2     23/02/2022  Added abbreviations for some organic groups
'                          (e.g. Et=ethyl, Ph=phenyl)
'                       Added excited states (e.g. He*, NO*)
'
'   1.1     21/02/2022  Added empirical formulae (decimal subscripts)
'                       Added nuclear isomers (e.g. 235mU)
'                       Added a few more delimiters
'
'   1.0     16/02/2022  First version
'
' ===========================================================================
'

' Force all variables to be declared
Option Explicit

' Declare global variables
Global ArrayElements() As String
Global ArrayIons() As String
Global ArrayIsotopes() As String
Global ArrayPolyatomic() As String
Global ArrayLigands() As String
Global ArrayAffixes() As String
Global allwords() As String
Global DebugMode, SearchForIsotopes As Boolean
Global VIalwaysElements, CheckOxidationStates As Boolean
Global SelectionIsLong, TrackedChangesOrigState As Boolean
Global HighlightFormulae, TrackChanges As Boolean
Global IsotopeThreshold, nReformatted As Long
Global aPossible_Formulae As Variant
Global aWrdCodes As Variant


Sub ProofChem()
        
    ' =============================
    ' Initialise Global Variables
    ' =============================
    HighlightFormulae = True    ' use False to deactivate highlighting of formulae
    TrackChanges = True    ' use False to deactivate tracked changes
    DebugMode = False
    SearchForIsotopes = True
    IsotopeThreshold = 20
    CheckOxidationStates = True
    VIalwaysElements = True
    Options.DefaultHighlightColorIndex = wdYellow
    TrackedChangesOrigState = ActiveDocument.TrackRevisions
    
    
    ' =============================
    ' Declare scalar variables
    ' =============================
    Dim SelectionText, Wrd, Wrd2, WrdCode As String
    Dim Msg As String
    Dim iQuit As Boolean
    Dim f, i, j, k, s, nChar, Answer As Long
    Dim TotalWords As Long
    Dim SelectedRange As Range
    
    
    ' ===================================
    ' Check user has selected some text
    ' ===================================
    SelectionText = Selection.Range.Text
    If Len(SelectionText) = 0 Then
        Answer = MsgBox("No text was selected." + vbCr + "Scan entire document?", _
                    vbQuestion + vbYesNo + vbDefaultButton1)
        If Answer = vbYes Then
            ActiveDocument.Range.Select
            SelectionText = Selection.Range.Text
            Selection.HomeKey unit:=wdStory   ' move cursor to top
        Else
            Exit Sub
        End If
    End If
    Set SelectedRange = Selection.Range
    
    ' Determine if selection is long or not
    ' (Final review message box will only be shown for long selections)
    If Len(SelectedRange.Text) > 1000 Then
        SelectionIsLong = True
    Else
        SelectionIsLong = False
    End If
        
        
    ' ============================================
    ' Parse selected text into an array of words
    ' ============================================
    allwords = ParseWords(SelectionText)
    TotalWords = 1 + UBound(allwords)
    

    ' ================================
    ' Pre-load some lookup tables
    ' ================================
    ArrayIsotopes = getIsotopes()       ' all known isotopes, e.g. 235U, 60 Cu
    ArrayElements = getElements()       ' all chemical elements
    ArrayIons = getIons()               ' common ions, e.g. NO3-
    ArrayPolyatomic = getPolyatomic()   ' polyatomic atoms, e.g. H2, Br2
    ArrayLigands = getLigands()         ' ligand abbreviations, e.g. cyclam, acac
    ArrayAffixes = getAffixes()         ' geometrical & structural affixes (e.g. cis-, trans-)
    

    ' ============================================
    ' Get array of all formulae in selected text
    ' ============================================
    GetArrayFormulae    ' create aPossible_Formulae() & awrDCodes()


    ' ====================================
    ' If no formulae detected, then quit
    ' ====================================
    If Len(aPossible_Formulae(0)) = 0 Then
        iQuit = True
        GoTo EndOfSub
    End If
    
    
    ' ========================================
    ' Format each character in each formula
    ' ========================================
    FormatFormulae  ' iterate through each word and format using FmtCode
    
    
    ' ========================================================
    ' Return cursor to first term at beginning of selection
    ' ========================================================
    SelectedRange.Select
    Selection.MoveLeft unit:=wdWord
    Wrd = aPossible_Formulae(LBound(aPossible_Formulae))
    Selection.Find.Highlight = wdUndefined
    Selection.Find.Execute FindText:=Wrd, Forward:=True, MatchWholeWord:=True, MatchCase:=True
    Selection.MoveLeft unit:=wdWord
    
    
    ' =============
    ' Update user
    ' =============
    If SelectionIsLong Then
        Msg = "Total words analysed:" + str(TotalWords)
        Msg = Msg + vbCr + vbCr + "Chemical formulae found:" + str(1 + UBound(aPossible_Formulae))
        Msg = Msg + vbCr + vbCr + "No. reformatted:" + str(nReformatted)
        MsgBox (Msg)
    End If
    
    
EndOfSub:
    
    If iQuit Then
        MsgBox ("No chemical formulae requiring subscipts/superscripts detected in selected text.")
    End If
    
End Sub


Function ParseWords(ByVal SelectionText As String) As String()

    ' This function takes a block of text and parses it into
    '   an array of words using multiple delimiters.
    
    Dim ArrayofDelimiters() As Variant
    Dim tDelimNew, tDelimOld As Variant
    Dim allwords() As Variant
    
    '   Unicode 7: used as a separator in Word tables
    '   Unicode 11: line break
    '   Unicode 62: > sometimes used to make an arrow in chemical equation, e.g. ->
    '   Unicode 160:
    '   Unicode 174:
    '   Unicode 183: interpunct (vertically centred dot)
    '   Unicode 10230: left arrow (Cambria math)
    
    ArrayofDelimiters = Array(" ", ",", ". ", ":", "?", "/", "\", vbCr, vbTab, ChrW(32), _
                ChrW(7), ChrW(11), ChrW(13), ChrW(62), ChrW(160), ChrW(183), ChrW(174), _
                ChrW(8594), ChrW(10230), "(s)", "(l)", "(g)", "(aq)")
    tDelimNew = " "
    For Each tDelimOld In ArrayofDelimiters
        SelectionText = Replace(SelectionText, tDelimOld, tDelimNew)
    Next tDelimOld
    SelectionText = Replace(SelectionText, tDelimNew & tDelimNew, tDelimNew) ' Remove duplicate delimiters
    
    ParseWords = Split(SelectionText, tDelimNew)

End Function


Sub GetArrayFormulae()
    
    ' This routine generates an array (aPossible_Formulae)of strings which are chemical formulae.
    ' A second array (aWrdCodes) contains strings representing the word code of each term.
    
    Dim sPossible_Formulae, sWrdCodes, sListElements, sListNumbers As String
    Dim Wrd, Wrd2, WrdCode, WrdCodeSimple, Element, Nmbr As Variant
    Dim KeepIt, ReachedEnd, AllLegal, AtLeastOneCapital As Boolean
    Dim f, j, nChar, StartCut, EndCut As Long
    Dim aListElements As Variant
    Dim aListNumbers As Variant
    Dim ForbiddenSequences() As Variant
    
    sPossible_Formulae = ""
    sWrdCodes = ""
    
    ' Iterate through each word and analyse each word with a set of rules.
    '    Words that pass the tests are added to list of chemical formulae.
    For Each Wrd In allwords
    
        ' Initialisation
        KeepIt = True
        ReachedEnd = False
        
        ' Perform a series of tests. Discard word (exit loop) if any test failed
        Do While ReachedEnd = False
            
            ' Trim any fullstop at the ends
            If Left(Wrd, 1) = "." Then Wrd = Right(Wrd, Len(Wrd) - 1)
            If Right(Wrd, 1) = "." Then Wrd = Left(Wrd, Len(Wrd) - 1)
    
            ' Trim parentheses if at both ends
            If Left(Wrd, 1) = "(" And Right(Wrd, 1) = ")" Then
                    If InStr(Mid(Wrd, 2, Len(Wrd) - 2), "(") = 0 Then
                        Wrd = Mid(Wrd, 2, Len(Wrd) - 2)
                    End If
            End If
            
            ' Trim any semi-colon at the ends
            If Left(Wrd, 1) = ";" Then
                Wrd = Right(Wrd, Len(Wrd) - 1)
            End If
            If Right(Wrd, 1) = ";" Then
                Wrd = Left(Wrd, Len(Wrd) - 1)
            End If
            
            ' Remove parentheses if uneven number
            If CountChars(Wrd, "(") <> CountChars(Wrd, ")") Then
                If Left(Wrd, 1) = "(" Then
                    Wrd = Right(Wrd, Len(Wrd) - 1)
                ElseIf Right(Wrd, 1) = ")" Then
                    Wrd = Left(Wrd, Len(Wrd) - 1)
                End If
            End If
            
            ' Trim any square brackets at the ends
            If Left(Wrd, 1) = "[" And Right(Wrd, 1) = "]" Then
                    If InStr(Mid(Wrd, 2, Len(Wrd) - 2), "[") = 0 Then
                        Wrd = Mid(Wrd, 2, Len(Wrd) - 2)
                    End If
            End If
    
            ' Trim plus sign if first character (e.g. user forgot to put space)
            If Left(Wrd, 1) = "+" Then Wrd = Right(Wrd, Len(Wrd) - 1)
    
            ' Trim dash if first character (sometimes used to indicate functional group)
            If Left(Wrd, 1) = "-" Then Wrd = Right(Wrd, Len(Wrd) - 1)
            If Left(Wrd, 1) = Chr(150) Then Wrd = Right(Wrd, Len(Wrd) - 1)
            If Left(Wrd, 1) = Chr(151) Then Wrd = Right(Wrd, Len(Wrd) - 1)
            If Left(Wrd, 1) = ChrW(8722) Then Wrd = Right(Wrd, Len(Wrd) - 1)
            
            
            ' ===============================================================
            ' Create a wordCode to describe the word, e.g. "NO3-" is "EENS"
            ' ===============================================================
            WrdCode = GetWrdCode(Wrd)
        
            
            ' ====================================================================
            ' TEST 1 - Ignore words that contain characters illegal characters
            ' ====================================================================
            AllLegal = True
            If InStr(WrdCode, "X") > 0 Then
                AllLegal = False
            End If
            If Not AllLegal Then
                If DebugMode Then Debug.Print Wrd, "Test 1 FAILED"
                Exit Do
            End If

            
            ' ============================================================
            ' TEST 2 - Ignore words that don't contain a capital letter
            ' ============================================================
            AtLeastOneCapital = False
            If InStr(WrdCode, "E") > 0 Then
                AtLeastOneCapital = True
            End If
            If Not AtLeastOneCapital Then
                If DebugMode Then Debug.Print Wrd, "Test 2 FAILED"
                Exit Do
            End If

            
            ' ==============================================================================
            ' Test 3 - Ignore words that don't contain a numeral, except:
            '           - if word is in list of ions without numerals, e.g. H+, F-
            '           - if word has asterisk for excited states, e.g. He*, NO*
            '           - if word has Roman numerals for oxidation state, e.g. MnVII, O-II
            ' ==============================================================================
            ' If word contains numeral
            If InStr(WrdCode, "N") > 0 Then
            ' If word is monoatomic ion
            ElseIf IsInArray(ReplaceDash(Wrd), ArrayIons) Then
            ' If word has asterisk for excited state
            ElseIf Right(Wrd, 1) = "*" Then
            ' If word contains Roman numerals (oxidation state)
            ElseIf InStr(WrdCode, "r") Then
            ' Else don't add word
            Else
                If DebugMode Then Debug.Print Wrd, "Test 3 FAILED"
                Exit Do
            End If
            
            
            ' ===================================================================================
            ' TEST 4 - Check for forbidden sequences, e.g. lowercase letter preceded by a number
            ' ===================================================================================
            ForbiddenSequences = Array("ee", "Ne", "Be", "Qe", "Se", "SS", "ESN", "BSN", "QSN", "NSE", "NSN")
            For f = LBound(ForbiddenSequences) To UBound(ForbiddenSequences)
                If InStr(WrdCode, ForbiddenSequences(f)) > 0 Then
                    KeepIt = False
                End If
            Next f
            If KeepIt = False Then
                If DebugMode Then Debug.Print Wrd, "Test 4 FAILED"
                Exit Do
            End If
            
            
            ' ===================================================================
            ' Extract all potential chemical elements from word, e.g. E, or Ee
            ' ===================================================================
            sListElements = ""
            For j = 1 To Len(WrdCode)
                If Mid(WrdCode, j, 1) = "E" Then ' capital letter found
                    nChar = 1
                    If j < Len(WrdCode) Then
                        If Mid(WrdCode, j + 1, 1) = "e" Then nChar = 2 '  lowercase letter
                    End If
                    sListElements = sListElements + " " + Mid(Wrd, j, nChar)
                End If
            Next j
            sListElements = Right(sListElements, Len(sListElements) - 1)
            aListElements = Split(sListElements, " ") ' convert to array
            
                        
            ' =============================================================
            ' TEST 5 - Check that all letters are real chemical elements
            ' =============================================================
            For Each Element In aListElements
                If Not IsInArray(Element, ArrayElements) Then
                    KeepIt = False
                End If
            Next Element
            If KeepIt = False Then
                If DebugMode Then Debug.Print Wrd, "Test 5 FAILED"
                Exit Do
            End If
                        
            
            ' ======================================
            ' Extract all numbers from word
            ' ======================================
            sListNumbers = ""
            StartCut = 0
            EndCut = 0
            For j = 1 To Len(WrdCode) ' iterate through each character in the word
                If StartCut = 0 Then ' look for start of number
                    If Mid(WrdCode, j, 1) = "N" Then ' numeral found
                        StartCut = j
                    End If
                End If
                If StartCut > 0 Then 'look for end of number
                    If j = Len(WrdCode) Then ' reached end of word
                        EndCut = j ' cut last character
                    ElseIf Not ((Mid(WrdCode, j + 1, 1) = "N") Or _
                            (Mid(WrdCode, j + 1, 1) = "P")) Then ' next char not a number
                        EndCut = j
                    End If
                End If
                If StartCut > 0 And EndCut > 0 Then ' extract number
                    Nmbr = Mid(Wrd, StartCut, 1 + EndCut - StartCut)
                    If Right(Nmbr, 1) = "m" Then Nmbr = Left(Nmbr, Len(Nmbr) - 1) ' nuclear isomer
                    If Right(Nmbr, 1) = "f" Then Nmbr = Left(Nmbr, Len(Nmbr) - 1) ' nuclear isomer
                    sListNumbers = sListNumbers + " " + Nmbr
                    StartCut = 0
                    EndCut = 0
                End If
            Next j
            
            
            ' Only do following tests (based on numbers) if term contains numbers
            If sListNumbers <> "" Then
                sListNumbers = Right(sListNumbers, Len(sListNumbers) - 1)
                aListNumbers = Split(sListNumbers, " ")
                
                
                ' ===========================================================================
                ' TESTS 6, 7 - Filter out non-sensical numbers
                ' ===========================================================================
                For Each Nmbr In aListNumbers
                    ' If more than 3 digits, e.g. H2020
                    If Len(Nmbr) > 3 Then
                        KeepIt = False
                        If DebugMode Then Debug.Print Wrd, "Test 6 FAILED"
                    ' If first digit of many is zero, e.g. CN008
                    ElseIf Len(Nmbr) > 1 And Left(Nmbr, 1) = "0" And Mid(Nmbr, 2, 1) <> "." Then
                        KeepIt = False
                        If DebugMode Then Debug.Print Wrd, "Test 7 FAILED"
                    End If
                Next Nmbr
                If KeepIt = False Then
                    Exit Do
                End If
                
                
                ' Simply the number code
                WrdCodeSimple = Replace(WrdCode, "Ee", "E")
                WrdCodeSimple = Replace(WrdCodeSimple, "NNN", "N")
                WrdCodeSimple = Replace(WrdCodeSimple, "NN", "N")
                
                
                ' ==========================================================================
                ' TEST 8 - If WrdCode is <element><number>, check if of polyatomic element
                ' ==========================================================================
                If WrdCodeSimple = "EN" Then
                    If Not IsInArray(Wrd, ArrayPolyatomic) Then
                        KeepIt = False
                    End If
                End If
                If KeepIt = False Then
                    If DebugMode Then Debug.Print Wrd, "Test 8 FAILED"
                    Exit Do
                End If
            
                
                ' ======================================================================================
                ' TEST 9 - If WrdCode is <element><element><number>, discard if number > 8, e.g. CN13
                ' ======================================================================================
                If WrdCodeSimple = "EEN" Then
                    If CLng(aListNumbers(0)) > 8 Then
                        KeepIt = False
                    End If
                End If
                If KeepIt = False Then
                    If DebugMode Then Debug.Print Wrd, "Test 9 FAILED"
                    Exit Do
                End If
                
                
                ' ===============================================================================
                ' TEST 10 - If WrdCode is <number><element>, check exists in list of isotopes
                ' ===============================================================================
                If WrdCodeSimple = "NE" Then
                    Wrd2 = Wrd
                    ' For nuclear isomers, e.g. 60mCo, remove the 'm' before searching
                    If InStr(Wrd2, "m") > 1 And InStr(Wrd2, "m") < Len(Wrd) Then
                        Wrd2 = Replace(Wrd2, "m", "")
                    End If
                    ' For nuclear isomers, e.g. 240fPu, remove the 'f' before searching
                    If InStr(Wrd2, "f") > 1 And InStr(Wrd2, "f") < Len(Wrd) Then
                        Wrd2 = Replace(Wrd2, "f", "")
                    End If
                    If Not IsInArray(Wrd2, ArrayIsotopes) Then
                        KeepIt = False
                    End If
                End If
                If KeepIt = False Then
                    If DebugMode Then Debug.Print Wrd, "Test 10 FAILED"
                    Exit Do
                End If
            
                
            End If  '      ( If sListNumbers <> "" )
            
             
            ' =======================================================
            ' If all tests passed, then word is a chemical formula
            ' =======================================================
            If KeepIt Then
                sPossible_Formulae = sPossible_Formulae + " " + Wrd
                sWrdCodes = sWrdCodes + " " + WrdCode
            End If
            
            ReachedEnd = True ' time to exit the Do Loop
        Loop
        
    Next Wrd  ' next word
    
    
    ' ==============================================================
    ' Initialise the Global arrays (aPossible_Formulae, aWrdCodes)
    ' ==============================================================
    If Len(sPossible_Formulae) > 0 Then
        ' Remove leading space
        sPossible_Formulae = Right(sPossible_Formulae, Len(sPossible_Formulae) - 1)
        sWrdCodes = Right(sWrdCodes, Len(sWrdCodes) - 1)
        ' Convert to array
        aPossible_Formulae = Split(sPossible_Formulae, " ")
        aWrdCodes = Split(sWrdCodes, " ")
    Else
        aPossible_Formulae = Array("")
        aWrdCodes = Array("")
    End If
    
    
End Sub


Sub FormatFormulae()
    
    ' This routine finds each chemical formula and applies formatting
    '   according to the format code (FmtCode)
    
    Dim Char As Range
    Dim i, j As Long
    Dim Wrd, WrdCode, Fmt, FmtCode As String
    Dim ReFormatted As Boolean
    
    ' Initialise settings
    Selection.MoveLeft unit:=wdWord
    nReformatted = 0
    
    ' Hide revisions/comments
    With ActiveWindow.View
      .ShowComments = False
      .ShowInkAnnotations = False
      .ShowInsertionsAndDeletions = False
      .ShowFormatChanges = False
    End With
    
    ' Iterate through each term stored in the array "aPossible_Formulae"
    For i = LBound(aPossible_Formulae) To UBound(aPossible_Formulae)
        
        Wrd = aPossible_Formulae(i)
        WrdCode = aWrdCodes(i)
        
        ' Find and select the matching term
        Selection.Find.Execute FindText:=Wrd, Forward:=True, MatchWholeWord:=True, MatchCase:=True, _
            MatchWildcards:=False
        
        ' Ignore term if part of a hyperlink
        If Selection.Hyperlinks.Count > 0 Then
            GoTo Skipword
        End If
        
        ' Highlight term
        If HighlightFormulae Then
            ActiveDocument.TrackRevisions = False
            Selection.Range.HighlightColorIndex = wdYellow
            ActiveDocument.TrackRevisions = TrackedChangesOrigState
        End If
        
        ' Get FmtCode from WrdCode
        FmtCode = GetFrmCode(Wrd, WrdCode)
        
        ' ===================================
        ' Go through each letter and format
        ' ===================================
        j = 1
        ReFormatted = False
        
        For Each Char In Selection.Characters
            Fmt = Mid(FmtCode, j, 1)
            If Fmt = "d" And Char.Font.Subscript = False Then
                If TrackChanges Then ActiveDocument.TrackRevisions = True
                Char.Font.Subscript = True
                ReFormatted = True
            ElseIf Fmt = "u" And Char.Font.Superscript = False Then
                If TrackChanges Then ActiveDocument.TrackRevisions = True
                Char.Font.Superscript = True
                ReFormatted = True
            ElseIf Fmt = "n" And (Char.Font.Subscript = True Or Char.Font.Superscript = True) Then
                If TrackChanges Then ActiveDocument.TrackRevisions = True
                Char.Font.Subscript = False
                Char.Font.Superscript = False
                ReFormatted = True
            ElseIf Fmt = "i" And Char.Font.Italic = False Then
                If TrackChanges Then ActiveDocument.TrackRevisions = True
                Char.Font.Italic = True
                ReFormatted = True
            End If
            j = j + 1
        Next Char  ' next character in word
        
        ' Count no. of terms that are re-formatted
        If ReFormatted Then nReformatted = nReformatted + 1
            
        ' Go to next term
        Selection.MoveRight unit:=wdWord
        
        ' Debugging
        If DebugMode Then
            Debug.Print Wrd, WrdCode, FmtCode
        End If
        
Skipword:
    Next i  ' next word in array of formulae
    
    ' Show revisions/comments
    ActiveDocument.TrackRevisions = TrackedChangesOrigState
    With ActiveWindow.View
      .ShowFormatChanges = True
    End With
    
End Sub


Function ReplaceDash(ByVal Wrd As String) As String

    ' Returns the input string, with all dash characters replaced by ASCII 150 dash
    
    Dim Wrd2 As String
    
    Wrd2 = Replace(Wrd, Chr(150), "-")  ' replace en dash with minus sign
    Wrd2 = Replace(Wrd2, Chr(151), "-")  ' replace em dash with minus sign
    Wrd2 = Replace(Wrd2, ChrW(8722), "-") ' replace strange dash (Unicode) with minus sign
    Wrd2 = Replace(Wrd2, ChrW(8211), "-") ' replace strange dash (Unicode) with minus sign

    ReplaceDash = Wrd2

End Function


Function ReplaceRndSqrBrackets(ByVal Wrd As String) As String

    ' Returns a string with all round and square brackets removed
    
    Dim Wrd2 As String
    
    Wrd2 = Replace(Wrd, "(", "")
    Wrd2 = Replace(Wrd2, ")", "")
    Wrd2 = Replace(Wrd2, "[", "")
    Wrd2 = Replace(Wrd2, "]", "")

    ReplaceRndSqrBrackets = Wrd2

End Function

Function IsInArray(ByVal stringToBeFound As String, ByVal arr As Variant) As Boolean
    
    ' Returns boolean (True/False) if 'stringToBeFound' is in array 'arr'
    
    Dim i As Long
    
    For i = LBound(arr) To UBound(arr)
        If arr(i) = stringToBeFound Then
            IsInArray = True
            Exit Function
        End If
    Next i
    
    IsInArray = False

End Function


Function GetWrdCode(ByVal Wrd As String) As String
    
    ' This function categorises each character in a chemical formula:
    
    '   E = uppercase letter (Element)
    '   e = lowercase letter
    '   N = Numeral
    '   B = round Brackets brackets
    '   Q = sQuare brackets
    '   S = plus or minus Sign (including weird dashes)
    '   P = decimal Point
    '   m = lowercase m or f (only for nuclear isomers)
    '   * = asterisk (for excited states)
    '   g = greek letter (micron)
    '   i = geometrical or structural affixes (e.g. trans-)
    '   r = Roman numerals (for oxidations state)
    '   X = any other character
    
    ' So GetWrdCode("Ag(NH3)2+") would return "EeBEENBNS"
        
    ' ASCII     https://www.ascii-code.com/
    ' Unicode   https://www.fileformat.info/info/unicode/char/search.htm
        
    Dim WrdCode, charCategory, Crib, Ligand, Wrd2  As String
    Dim chrASCII, j, k, L As Long
    Dim Affix, RomNum As Variant
    Dim ElementPreceding, OnlyRomannumerals As Boolean
    

    WrdCode = ""
    For j = 1 To Len(Wrd) ' iterate through each character
        
        chrASCII = AscW(Mid(Wrd, j, 1))
        charCategory = "X"
                        
        ' ======================================
        ' Nuclear isomers, e.g. 58mCo, 58fCo
        ' ======================================
        ' If lowercase 'm' is preceded by a numeral and followed by an uppercase letter,
        ' then it is considered part of the number.
        If j > 1 And j < Len(Wrd) And Mid(Wrd, j, 1) = "m" Then
            If AscW(Mid(Wrd, j - 1, 1)) > 47 And AscW(Mid(Wrd, j - 1, 1)) < 58 And _
                AscW(Mid(Wrd, j + 1, 1)) > 64 And AscW(Mid(Wrd, j + 1, 1)) < 91 Then
                    charCategory = "N"
            End If
        ' If lowercase 'f' is preceded by a numeral and followed by an uppercase letter,
        ' then it is considered part of the number.
        ElseIf j > 1 And j < Len(Wrd) And Mid(Wrd, j, 1) = "f" Then
            If AscW(Mid(Wrd, j - 1, 1)) > 47 And AscW(Mid(Wrd, j - 1, 1)) < 58 And _
                AscW(Mid(Wrd, j + 1, 1)) > 64 And AscW(Mid(Wrd, j + 1, 1)) < 91 Then
                    charCategory = "N"
            End If
        
        
        ' =========================================
        ' Format letters, numbers, brackets, etc.
        ' =========================================
        ' UPPERCASE letter
        ElseIf chrASCII > 64 And chrASCII < 91 Then
                charCategory = "E"
        
        ' lowercase letters
        ElseIf chrASCII > 96 And chrASCII < 123 Then
                charCategory = "e"
        
        ' numerals
        ElseIf chrASCII > 47 And chrASCII < 58 Then
                charCategory = "N"
        
        ' parentheses ( )
        ElseIf chrASCII = 40 Or chrASCII = 41 Then
                charCategory = "B"
        
        ' braces { }
        ElseIf chrASCII = 123 Or chrASCII = 125 Then
                charCategory = "B"
        
        ' square brackets [  ]
        ElseIf chrASCII = 91 Or chrASCII = 93 Then
                charCategory = "Q"
        
        ' plus or minus  +   -
        ElseIf chrASCII = 43 Or chrASCII = 45 Then
                charCategory = "S"
        
        '  en dash, em dash
        ElseIf chrASCII = 150 Or chrASCII = 151 Or chrASCII = 8722 Or chrASCII = 8211 Then
                charCategory = "S"
        
        '  decimal Point
        ElseIf chrASCII = 46 Then
                charCategory = "P"
                
        '  semi-colon
        ElseIf chrASCII = 59 Then
                charCategory = "P"
        
        '  asterisk
        ElseIf chrASCII = 42 Then
                charCategory = "*"
                
        ' greek letter Mu (micron)
        ElseIf chrASCII = 956 Then  ' Symbol font will NOT work. Proper micron = ALT+956
                charCategory = "g" '  g
        
        End If
        WrdCode = WrdCode & charCategory
    
    Next j  ' next character in the word
    
    
    ' =====================================
    ' Geometrical and structural affixes
    ' =====================================
    For j = LBound(ArrayAffixes) To UBound(ArrayAffixes)
        Affix = ArrayAffixes(j)
        ' If word starts with affix, replace characters in WrdCode with 'i'
        If Left(Wrd, Len(Affix)) = Affix Then
            Crib = ""
            For k = 1 To Len(Affix)
                Crib = Crib + "i"
            Next k
            WrdCode = Crib + Right(WrdCode, Len(WrdCode) - Len(Crib))
        End If
    Next j
    
    
    ' ============================================
    ' Ligand abbreviations (e.g. en, acac, dmso)
    ' ============================================
    For j = LBound(ArrayLigands) To UBound(ArrayLigands)
        Ligand = ArrayLigands(j)
        ' If word includes ligand abbreviation, replace characters in WrdCode with 'L'
        L = InStr(Wrd, Ligand)
        If L > 0 And Ligand <> "" Then
            Crib = ""
            For k = 1 To Len(Ligand)
                Crib = Crib + "L"
            Next k
                WrdCode = Left(WrdCode, L - 1) + Crib + Right(WrdCode, Len(WrdCode) - L - k + 2)
        End If
    Next j
    
        
    ' =================================================
    ' Roman numerals (oxidation state) as superscript
    ' =================================================
    OnlyRomannumerals = False
    Wrd2 = ReplaceRndSqrBrackets(Wrd)
    For Each RomNum In Array("-IV", "-III", "-II", "-I", "0", "I", "II", "III", "IV", "V", "VI", "VII", "VIII")
        If Wrd2 = RomNum Then OnlyRomannumerals = True
    Next RomNum
    
    For Each RomNum In Array("(-IV)", "(-III)", "(-II)", "(-I)", "(0)", "(I)", "(II)", _
        "(III)", "(IV)", "(V)", "(VI)", "(VII)", "(VIII)")
        If InStr(Wrd, RomNum) > 0 Then OnlyRomannumerals = True
    Next RomNum
    
    If Not OnlyRomannumerals And CheckOxidationStates Then    ' only format Roman numerals if other elements present
        Wrd2 = ReplaceDash(Wrd)
        j = 2
        Do Until j > Len(WrdCode)
        
            ' Check if element preceding any Roman numerals
            ElementPreceding = False
            If j = 2 Then
                If Mid(WrdCode, j - 1, 1) = "E" Then
                    ElementPreceding = True
                End If
            Else
                If Mid(WrdCode, j - 1, 1) = "E" Or Mid(WrdCode, j - 2, 2) = "Ee" Then
                    ElementPreceding = True
                End If
            End If
                    
            ' Check for Roman numerals and label them with 'r'
            If ElementPreceding Then
                If Mid(Wrd2, j, 4) = "VIII" Then
                    WrdCode = Left(WrdCode, j - 1) & "rrrr" & Right(WrdCode, Len(WrdCode) - j - 3)
                    j = j + 3
                ElseIf Mid(Wrd2, j, 3) = "VII" Then
                    WrdCode = Left(WrdCode, j - 1) & "rrr" & Right(WrdCode, Len(WrdCode) - j - 2)
                    j = j + 2
                ElseIf Mid(Wrd2, j, 2) = "VI" Then
                    WrdCode = Left(WrdCode, j - 1) & "rr" & Right(WrdCode, Len(WrdCode) - j - 1)
                    j = j + 1
                ElseIf Mid(Wrd2, j, 2) = "V" And Not VIalwaysElements Then
                    WrdCode = Left(WrdCode, j - 1) & "r" & Right(WrdCode, Len(WrdCode) - j)
                    j = j + 1
                ElseIf Mid(Wrd2, j, 3) = "III" Then
                    WrdCode = Left(WrdCode, j - 1) & "rrr" & Right(WrdCode, Len(WrdCode) - j - 2)
                    j = j + 2
                ElseIf Mid(Wrd2, j, 2) = "II" Then
                    WrdCode = Left(WrdCode, j - 1) & "rr" & Right(WrdCode, Len(WrdCode) - j - 1)
                    j = j + 1
                ElseIf Mid(Wrd2, j, 2) = "I" And Not VIalwaysElements Then
                    WrdCode = Left(WrdCode, j - 1) & "r" & Right(WrdCode, Len(WrdCode) - j)
                    j = j + 1
                ElseIf Mid(Wrd2, j, 2) = "IV" Then
                    WrdCode = Left(WrdCode, j - 1) & "rr" & Right(WrdCode, Len(WrdCode) - j - 1)
                    j = j + 1
                ElseIf Mid(Wrd2, j, 4) = "-III" Then
                    WrdCode = Left(WrdCode, j - 1) & "rrrr" & Right(WrdCode, Len(WrdCode) - j - 3)
                    j = j + 3
                ElseIf Mid(Wrd2, j, 3) = "-II" Then
                    WrdCode = Left(WrdCode, j - 1) & "rrr" & Right(WrdCode, Len(WrdCode) - j - 2)
                    j = j + 2
                ElseIf Mid(Wrd2, j, 2) = "-I" Then
                    WrdCode = Left(WrdCode, j - 1) & "rr" & Right(WrdCode, Len(WrdCode) - j - 1)
                    j = j + 1
                ElseIf Mid(Wrd2, j, 3) = "-IV" Then
                    WrdCode = Left(WrdCode, j - 1) & "rr" & Right(WrdCode, Len(WrdCode) - j - 2)
                    j = j + 2
                ElseIf Mid(Wrd2, j, 1) = "0" And Mid(WrdCode, j + 1, 1) <> "P" And _
                        Mid(WrdCode, j + 1, 1) <> "N" Then
                    WrdCode = Left(WrdCode, j - 1) & "r" & Right(WrdCode, Len(WrdCode) - j - 0) ' delete if too many false alarms
                    j = j + 0
                End If
            End If
        j = j + 1
        Loop
    End If  ' if not OnlyRomanNumerals
    

    GetWrdCode = WrdCode

End Function


Function GetFrmCode(ByVal Wrd As String, Optional ByVal WrdCode As String = "") As String
    
    ' This function takes a chemical formula as input, and returns a format code:
    '       n = normal
    '       u = superscript(up)
    '       d = subscript(down)
    '       i = italic
    '
    ' So GetFrmCode("H2O") would return "ndn"
    
    Dim chrASCII, c, j, k, u, FirstElement, MatchLength, ElementLength As Long
    Dim Wrd2, Ltr, LtrCode, LtrFmt, FmtCode, WrdCodeSimple, WrdCodeSimple2 As String
    Dim Charac, Crib, Filler, charac_ASCII, charCategory As String
    Dim IsotopeFound As Boolean
        
    ' If no WrdCode supplied, then work it out
    If WrdCode = "" Then WrdCode = GetWrdCode(Wrd)
    
    ' Simply the number code
    WrdCodeSimple = Replace(WrdCode, "Ee", "E")
    FmtCode = WrdCode
    
    ' Simply the number code (again)
    WrdCodeSimple2 = Replace(WrdCodeSimple, "NNN", "N")
    WrdCodeSimple2 = Replace(WrdCodeSimple2, "NN", "N")

    ' ======================================================
    ' If last character is plus or minus sign, it's an ion
    ' ======================================================
    If Right(WrdCode, 1) = "S" Then
    
        ' Monoatomic ions, e.g. Na+, F-, Mg2+, N3-
        If WrdCodeSimple = "ES" Or WrdCodeSimple = "ENS" Then
            FmtCode = Replace(FmtCode, "E", "n")
            FmtCode = Replace(FmtCode, "e", "n")
            FmtCode = Replace(FmtCode, "N", "u")
            FmtCode = Replace(FmtCode, "S", "u")
                    
        ElseIf WrdCodeSimple = "ENNS" Or WrdCodeSimple = "NENNS" Then  ' e.g. Hg22+
            FmtCode = Left(FmtCode, Len(FmtCode) - 3) & "duu"
        
        ElseIf WrdCodeSimple2 = "NES" Then
            FmtCode = Left(FmtCode, Len(FmtCode) - 1) & "u"
                    
        ElseIf WrdCodeSimple2 = "NENS" Then
            FmtCode = Left(FmtCode, Len(FmtCode) - 3) & "nuu"
        
        
        ' Polyatomic ions, e.g. CN-, OH-, SCN-, NO3-, ClO2-, C2H2O2-, SO42-, PO33-
        ElseIf Len(WrdCodeSimple) >= 5 And _
            Right(WrdCodeSimple, 5) = "EENNS" Or Right(WrdCodeSimple, 5) = "NENNS" Then
                FmtCode = Left(FmtCode, Len(FmtCode) - 3) & "duu"
        
        ' Complex ions, e.g. Ag(NH3)2+, Ag(S2O3)23-
        ElseIf Right(WrdCodeSimple, 4) = "BNNS" Then
            FmtCode = Left(FmtCode, Len(FmtCode) - 3) & "duu"
        
        ' Coordination complex (with square brackets), e.g. [Ag(CN)2]-, [Cu(NH3)4]2+
        ElseIf Right(WrdCodeSimple, 3) = "QNS" Then
            FmtCode = Left(FmtCode, Len(FmtCode) - 2) & "uu"
        ElseIf Right(WrdCodeSimple, 4) = "QNNS" Then
            FmtCode = Left(FmtCode, Len(FmtCode) - 3) & "duu"
    
        End If
    
    FmtCode = Left(FmtCode, Len(FmtCode) - 1) & "u" ' last sign (+/-) is always superscript
    
    End If  ' end of "if it's an ion"
        
    
    ' ===========================================
    ' Check if isotope, i.e. <number><element>
    ' ===========================================
    If WrdCodeSimple2 = "NE" Then
        Wrd2 = Wrd
        ' For nuclear isomers, e.g. 60mCo, remove the 'm' before searching
        If InStr(Wrd2, "m") > 1 And InStr(Wrd2, "m") < Len(Wrd) Then
            Wrd2 = Replace(Wrd2, "m", "")
        End If
        ' For nuclear isomers, e.g. 240fPu, remove the 'f' before searching
        If InStr(Wrd2, "f") > 1 And InStr(Wrd2, "f") < Len(Wrd) Then
            Wrd2 = Replace(Wrd2, "f", "")
        End If
        If IsInArray(Wrd2, ArrayIsotopes) Then
           ' format as isotope
           FmtCode = Replace(FmtCode, "N", "u")
           FmtCode = Replace(FmtCode, "E", "n")
           FmtCode = Replace(FmtCode, "e", "n")
        Else
           ' format all normal
           FmtCode = Replace(FmtCode, "N", "n")
           FmtCode = Replace(FmtCode, "E", "n")
           FmtCode = Replace(FmtCode, "e", "n")
        End If
    
    ElseIf WrdCodeSimple2 = "ESN" And InStr(Wrd, "-") > 0 Then
        ' Check if alternative isotope notation, e.g. Ra-226 instead of 226Ra
        Wrd2 = ""
        Wrd2 = Wrd2 & Right(Wrd, InStr(Wrd, "-"))
        Wrd2 = Wrd2 & Left(Wrd, InStr(Wrd, "-") - 1)
        If IsInArray(Wrd2, ArrayIsotopes) Then
           ' format as isotope
           FmtCode = Replace(FmtCode, "N", "n")
           FmtCode = Replace(FmtCode, "E", "n")
           FmtCode = Replace(FmtCode, "e", "n")
        End If
    End If
        
    If WrdCodeSimple2 <> "NE" Then    ' not an ion or an isotope
        
        ' For decimal subscripts, replace point with number
        FmtCode = Replace(FmtCode, "NPN", "NNN")
        
        ' If term doesn't start with element, e.g. 2H2O
        FirstElement = InStr(FmtCode, "E")
        ' numbers before first element not subscript, unless representing optically active, e.g. (+) or (-)
        If FirstElement > 1 And Left(WrdCode, 3) <> "BSB" Then
            FmtCode = Replace(Left(FmtCode, FirstElement - 1), "N", "n") & Replace(FmtCode, "N", "d", Start:=FirstElement)
        Else    ' remaining numbers are subscript
            FmtCode = Replace(FmtCode, "N", "d")
        End If
        
        ' =========================
        ' Format other characters
        ' =========================
        FmtCode = Replace(FmtCode, "E", "n")
        FmtCode = Replace(FmtCode, "e", "n")
        FmtCode = Replace(FmtCode, "B", "n")
        FmtCode = Replace(FmtCode, "Q", "n")
        FmtCode = Replace(FmtCode, "*", "u")
        FmtCode = Replace(FmtCode, "r", "u")
          
          
        ' =========================================================
        ' Search for isotropically labelled/substituted compounds
        ' =========================================================
        If SearchForIsotopes Then
            j = 1
            Do Until j >= Len(Wrd)
                MatchLength = 0
                ElementLength = 1
                If Mid(WrdCode, j, 4) = "NNNE" Then
                    MatchLength = 4
                    If Mid(WrdCode, j + MatchLength, 1) = "e" Then ElementLength = 2
                ElseIf Mid(WrdCode, j, 3) = "NNE" Then
                    MatchLength = 3
                    If Mid(WrdCode, j + MatchLength, 1) = "e" Then ElementLength = 2
                ElseIf Mid(WrdCode, j, 2) = "NE" Then
                    MatchLength = 2
                    If Mid(WrdCode, j + MatchLength, 1) = "e" Then ElementLength = 2
                End If
                If MatchLength > 0 Then
                    For k = MatchLength To 2 Step -1
                        Crib = Mid(Wrd, j + MatchLength - k, k + ElementLength - 1)
                        If IsInArray(Crib, ArrayIsotopes) Then  ' check if isotope
                            IsotopeFound = False
                            ' if previous character is Q or B
                            If j > 1 Then
                                If Mid(WrdCode, j - 1, 1) = "Q" Or Mid(WrdCode, j - 1, 1) = "B" Then
                                    IsotopeFound = True
                                End If
                            End If
                            ' or, if number is greater than 'IsotopeThreshold'
                            If CLng(Mid(Wrd, j + MatchLength - k, k - 1)) > IsotopeThreshold Then
                                IsotopeFound = True
                            End If
                            If IsotopeFound Then
                                ' Format Crib numbers in FmtCode as superscript (u)
                                If DebugMode Then Debug.Print Crib & " is an isotope in " & Wrd
                                Filler = ""
                                For u = 1 To (k - 1)
                                    Filler = Filler + "u"
                                Next u
                                If DebugMode Then Debug.Print j, k, Wrd, WrdCode, FmtCode
                                Filler = Left(FmtCode, j + MatchLength - k - 1) + Filler
                                FmtCode = Filler + Right(FmtCode, Len(FmtCode) - Len(Filler))
                                If DebugMode Then Debug.Print j, k, Wrd, WrdCode, FmtCode
                                Exit For
                            End If
                        End If
                    Next k
                    j = j + MatchLength
                Else
                    j = j + 1
                End If
            Loop
        End If   ' End: If SearchForIsotopes = True
          
    End If  ' End: Else (not an ion or an isotope)
    
    GetFrmCode = FmtCode
    
End Function


Function getElements() As String()

    Dim StringElements As String
    Dim ArrayElements() As String
    
    StringElements = "Ac Ag Al Am Ar As At Au B Ba Be Bh Bi Bk Br C Ca Cd Ce Cf Cl" & _
    " Cm Cn Co Cr Cs Cu Db Ds Dy Er Es Eu F Fe Fl Fm Fr Ga Gd Ge H He Hf Hg Ho Hs" & _
    " I In Ir K Kr La Li Lr Lu Lv Mc Md Mg Mn Mo Mt N Na Nb Nd Ne Nh Ni No Np O Og" & _
    " Os P Pa Pb Pd Pm Po Pr Pt Pu Ra Rb Re Rf Rg Rh Rn Ru S Sb Sc Se Sg Si Sm Sn Sr" & _
    " Ta Tb Tc Te Th Ti Tl Tm Ts U V W Xe Y Yb Zn Zr"
    
    ' Add common abbreviations, e.g. ethyl(Et), phenyl (Ph), methyl(Me)
    StringElements = StringElements & " Ac Bu Cp Cy Et Me Ph Tp"
    ' See IUPAC Red Book 2005 Table VII
    
    ArrayElements = Split(StringElements, " ")

    getElements = ArrayElements
    
End Function


Function getPolyatomic() As String()
    
    ' Creates a lookup table (array) of polyatomic elements
    
    Dim StringPolyatomic As String
    Dim ArrayPolyatomic() As String

    StringPolyatomic = "H2 N2 F2 O2 I2 Cl2 Br2 O3 P4 S8"
    ArrayPolyatomic = Split(StringPolyatomic, " ")
    
    getPolyatomic = ArrayPolyatomic
    
End Function


Function getAffixes() As String()

    ' Creates a lookup table (array) of structural affixes
    ' Source: IUPAC Red Book 2005, Table V
        
    Dim StringAffixes As String
    Dim ArrayAffixes() As String
    
    StringAffixes = "antiprismo arachno asym catena cis closo cyclo dodecahedro fac hexahedro" & _
                    " hexaprismo icosahedro klado mer nido octahedro pentaprismo quadro sym" & _
                    " tetrahedro trans triangulo tiprismo"
    
    ArrayAffixes = Split(StringAffixes, " ")

    getAffixes = ArrayAffixes
    
End Function


Function getLigands() As String()

    ' Creates a lookup table (array) of ligand abbreviations
    ' Source: IUPAC Red Book 2005, Table VII
    
    Dim StringLigands As String
    Dim ArrayLigands() As String
    
    StringLigands = "4-abu acac acacen ade ado adp aet ala ama amp" & _
    " [9]ane tacn [12]ane cyclen [14]ane cyclam [18]ane [9]ane [12]ane" & _
    " arg asn asp atmp atp 23-bdta benzo-15-crown-5 big biim binap" & _
    " bn bpy 44'-bpy bzac bzim Bz  bztz cat cbdca cdta chxn" & _
    " cit cod cot cptn 18-crown-6 crypt-211 crypt-222 cys cyt" & _
    " dabco dach dbm dea depe diars dien [14]13-diene diop diox" & _
    " dipamp dma dme dmf dmg dmpe dmpm dmso dpm dppe dppf dppm" & _
    " dppp dtmpa dtpa ea edda edta edtmpa egta en dtc fod dta" & _
    " gln glu gly gua guo hdtmpa hedp hfa his hmpa hmta ida" & _
    " ile im isn leu lut lys mal male malo 2-Mepy met mnt" & _
    " napy nbd nia nmp nta oep ox pc 12-pdta 13-pdta phe phen" & _
    "  pip pmdien pn ppIX pro ptn py pyz pz qdt quin sal" & _
    " salan saldien salen salgly salpn saltn sdta sep ser stien" & _
    " tacn tap tart tcne tcnq tdt tea terpy 232-tet 333-tet" & _
    " tetren tfa thf thiox thr tht thy tmen tmp tn Tol Tp" & _
    " Tp' tpp tren trien triphos tris trp tsalen ttfa ttha" & _
    " ttp tu tyr tz ura val"
    
    ArrayLigands = Split(StringLigands, " ")

    getLigands = ArrayLigands
    
End Function


Function getIons() As String()

    Dim StringIons As String
    Dim ArrayIons() As String
    
    ' Creates a lookup table (array) of ions
    ' Source: https://cccbdb.nist.gov/ionlist.asp, accessed 14 Feb 2022
    
    StringIons = "D- D+ H- H+ H2- H2+ H3+ He- He+ HeH+ He2+ Li- Li+ Na- Na+ K- K+ Cu- Cu+ LiH- LiH+" & _
    " NaH- NaH+ KH+ Be- Be+ Mg- Mg+ Ca- Ca+ Zn- Zn+ BeH- BeH+ MgH- MgH+ CaH+ ZnH+ BeH2+ B- B+" & _
    " Al- Al+ Sc+ Ga- Ga+ Ag+ BH- BH+ AlH- AlH+ ScH+ GaH+ BH2- BH2+ AlH2- AlH2+ BH3- BH3+ AlH3-" & _
    " AlH3+ BH4- AlH4- C- C+ Si- Si+ Ti- Ti+ Ge- Ge+ CH- CH+ SiH- SiH+ GeH+ CH2- CH2+ SiH2-" & _
    " SiH2+ GeH2- CH3- CH3+ SiH3- SiH3+ GeH3+ CH4- CH4+ SiH4+ SiH5+ N- N+ P- P+ V+ As- As+" & _
    " NH- NH+ PH- PH+ AsH+ NH2- NH2+ PH2- PH2+ AsH2+ NH3- NH3+ PH3+ AsH3+ NH4+ PH4+ O- O+ S-" & _
    " S+ Se- Se+ OH- HO- OH+ HS- HS+ CrH+ HSe- HSe+ H2O- H2O+ H2S- H2S+ H2Se+ H3O+ H3S+ H3Se+ F-" & _
    " F+ Cl- Cl+ Br- Br+ I- I+ HF- HF+ HCl- HCl+ HBr- HBr+ HI+ H2F+ H2Cl+ H2Br+ H2I+ Ne- Ne+" & _
    " Ar- Ar+ Kr+ HeLi+ NeH+ ArH+ KrH+ XeH+ Li2- Li2+ NaLi- NaLi+ Na2- Na2+ NaK+ Be2- Be2+ Mg2-" & _
    " Mg2+ B2- B2+ Al2- Al2+ B2H6+ BC- BC+ C2- C2+ SiC- SiC+ Si2- Si2+ C2H- C2H+ C2H2+ H2CC-" & _
    " HCCH- C2H3- C2H3+ C2H4- C2H4+ C2H5- C2H5+ C2H6+ C2H7+ LiN+ BeN- BeN+ BN- AlN- AlN+ BN+" & _
    " CN- CN+ CP- CP+ SiN- SiN+ SiP- SiP+ N2- N2+ PN- PN+ P2- P2+ HCN- HCN+ HNC+ NNH+ HPO+ CNH2+" & _
    " H2CN+ HCNH+ N2H2+ CH2NH+ CHNH2+ CH2NH2+ N2H4+ CH3NH2+ N2H5+ CH3NH3+ CH3PH3+ N2H7+ LiO-" & _
    " LiO+ LiS+ NaO- NaO+ KO+ BeO- BeO+ MgO- MgO+ MgS- MgS+ BeS- BeS+ BO- AlO- AlO+ BS- BS+ AlS-" & _
    " AlS+ BO+ CO- CO+ CS- CS+ SiO- SiO+ SiS- SiS+ CSe- CSe+ GeO+ SiSe+ NO- NO+ NS- NS+ PO- PO+" & _
    " PS- PS+ O2- O2+ SO- SO+ S2- S2+ SeO- SeO+ SeS- SeS+ Se2- Se2+ COH+ HCO- HCO+ HCS- HCS+ HNO-" & _
    " HNO+ NOH+ HNS- HO2- HO+ HO2+ HSO+ SOH+ KOH2+ H2CO- H2CO+ H2CS- H2CS+ H2O2+ H2S2+ CH2OH+ CH3O-" & _
    " CH3O+ H2CSH+ NH2OH+ H3O2+ CH3OH- CH3OH+ CH3SH+ NH2OH2+ NH3OH+ CH3OH2+ CH3SH2+ H5O2+ LiCl-"
    
    StringIons = StringIons & _
    " LiCl+ NaF- NaF+ NaCl- NaCl+ LiBr- LiBr+ NaBr- NaBr+ LiF- LiF+ BeF- BeF+ MgF- MgF+ MgCl-" & _
    " MgCl+ ZnF- ZnF+ BeCl- BeCl+ BF- BF+ AlF- AlF+ BCl- BCl+ AlCl- AlCl+ GaF+ GaCl+ CF- CF+" & _
    " CCl- CCl+ SiF- SiF+ SiCl- SiCl+ GeF+ GeCl+ SiBr+ NF- NF+ NCl- NCl+ PF- PF+ PCl- PCl+ FO-" & _
    " FO+ ClO- ClO+ SF- SF+ SCl- SCl+ BrO- F2- F2+ ClF- ClF+ Cl2- Cl2+ BrF- BrF+ BrCl- BrCl+" & _
    " Br2- Br2+ I2+ HOCl+ HOBr+ F2H+ FHF- ClFH+ FClH+ Cl2H+ CH2F+ CH2Cl+ CH3F+ CH3Cl+ CH3ClH+" & _
    " LiNe+ Ne2+ Ar2+ Li3+ C3+ C3H3- Hg22+ Hg+" & _
    " C3H3+ C3H3+ C3H5+ C3H7+ C3H7+ CH3CHCH3+" & _
    " N3- N3+ HN3+ CH3CN- CH3CN+ HCNCH2+ HNCNH2+ NCNH3+ NH2CNH+" & _
    " NH3CN+ C2H5NH+ C2H6N+ NH2CH2NH3+ (CH3)2NH2+ CH3CH2NH3+ Li2O+ CNO- NCO- SCN- BO2- BO2+ N2O-" & _
    " N2O+ CO2- CO2+ OCS+ CS2- CS2+ NO2- NO2+ PO2- PO2+ O3- O3+ SO2- SO2+ S3- S3+ SeO2+ HCO2- HNNO+" & _
    " NNOH+ HOCO+ HNO2+ O3H+ SO2H+ CH2CO+ H2COO+ CH2COH+ CH3CO- CH3CO+ CH3OO- CH3OO+ C2H4O+ CH3CHO+" & _
    " H2COCH2+ H2CONH2+ NH2CHOH+ NH3CHO+ C2H4OH+ CH3CHOH+ CH3SCH3+ FCO+ CF2- CF2+ SiF2+ CCl2- CCl2+" & _
    " ClOO+ OClO- OClO+ NF2+ PF2+ SF2- SF2+ F3- Cl3- HCCF+ HFCO+ CHF2+ CHFCl+ CHCl2+ CH2CHF+ C4+ C4- C22- C34-" & _
    " C4H2+ C2N2+ HCCCN+ C3H3N+ CH3NHN2+ CH6N3+ (CH3)3NH+ C3H7NH3+ CO32- CS32- NO3- NO3+ SO3- SO3+" & _
    " HCO3- C2H2O2+ H2NO3+ CH3COO- H3CO3+ NH2CONH2+ NH2COOH2+ NH3COOH+ CH5N2O+ H2NCOHNH2+ CH3COCH3-" & _
    " CH3COHCH3+ C2Cl2+ CF2O+ BF3- BF3+ ClO3- CF3- CF3+ SiF3+ CCl3- CCl3+ SiCl3+ NF3- NF3+ NF3H+" & _
    " AsF3H+ CH2ClCH2OH2+ C3H9O+ C5H5- C3H3N2- C4H4N- C4H6N+ C4H6N+ C4H6N+ NC4H12+ C3O2+ PO43-" & _
    " SO42- HSO4- C4H4O+ C4H10O+ ClO4- BF4- CCl4+ C2HF3+ C6H5- C6H6+ C6H7+ C5H6N+ C2O42- CF3CN+" & _
    " C2F4+ SiF5- SF5+ C7H7+ CF3COO- PF6- C4O42- C6N4- B12H122- "
    
    ' aqueous ions and Lanthanide ions
    StringIons = StringIons & _
    "Ac3+ Ag+ Al3+ Am3+ Au3+ Ba2+ Be2+ Bi3+ Bk3+ Bk4+ Ca2+ Cd2+ Ce3+ Ce4+ Cf3+ Cm3+ Co2+ Co3+ Cr2+" & _
    " Cr3+ Cs+ Cu+ Cu2+ Dy3+ Dy4+ Er3+ Es3+ Eu2+ Eu3+ Fe2+ Fe3+ Fm2+ Fm3+ Fr+ Ga3+ Gd3+ H+ Hg2+ Hg2+2" & _
    " Ho3+ HS- HTe- In3+ K+ La3+ Li+ Lr3+ Lu3+ Md2+ Md3+ Mg2+ Mn2+ Mo3+ Na+ Nd3+ Nd4+ Ni2+ No2+ No3+" & _
    " Np3+ Np4+ Pa3+ Pa4+ Pb2+ Pd2+ Pm3+ Po2+ Pr3+ Pr4+ Pt2+ Pu3+ Pu4+ Ra2+ Rb+ Rh3+ Ru2+ Ru3+ Sb3-" & _
    " Sc3+ Sm2+ Sm3+ Sn2+ Sr2+ Tb3+ Tb4+ Te2- Th4+ Ti3+ Tl+ Tm2+ Tm3+ U3+ U4+ V2+ V3+ Y3+ Yb2+ Yb3+ Zn2+"
    ArrayIons = Split(StringIons, " ")
    
    getIons = ArrayIons
    
End Function


Function getIsotopes() As String()
    
    Dim StringIsotopes As String
    Dim ArrayIsotopes() As String
    
    ' Creates a lookup table (array) of isotopes
    ' Source: https://periodictable.com/Properties/A/KnownIsotopes.html, accessed 14 Feb 2022
    
    StringIsotopes = "1H 2H 3H 4H 5H 6H 7H 2He 3He 4He 5He 6He 7He 8He 9He 10He 3Li 4Li" & _
    " 5Li 6Li 7Li 8Li 9Li 10Li 11Li 12Li 5Be 6Be 7Be 8Be 9Be 10Be 11Be 12Be 13Be 14Be 15Be" & _
    " 16Be 6B 7B 8B 9B 10B 11B 12B 13B 14B 15B 16B 17B 18B 19B 8C 9C 10C 11C 12C 13C 14C" & _
    " 15C 16C 17C 18C 19C 20C 21C 22C 10N 11N 12N 13N 14N 15N 16N 17N 18N 19N 20N 21N 22N" & _
    " 23N 24N 25N 12O 13O 14O 15O 16O 17O 18O 19O 20O 21O 22O 23O 24O 25O 26O 27O 28O 14F" & _
    " 15F 16F 17F 18F 19F 20F 21F 22F 23F 24F 25F 26F 27F 28F 29F 30F 31F 16Ne 17Ne 18Ne" & _
    " 19Ne 20Ne 21Ne 22Ne 23Ne 24Ne 25Ne 26Ne 27Ne 28Ne 29Ne 30Ne 31Ne 32Ne 33Ne 34Ne 18Na" & _
    " 19Na 20Na 21Na 22Na 23Na 24Na 25Na 26Na 27Na 28Na 29Na 30Na 31Na 32Na 33Na 34Na 35Na" & _
    " 36Na 37Na 19Mg 20Mg 21Mg 22Mg 23Mg 24Mg 25Mg 26Mg 27Mg 28Mg 29Mg 30Mg 31Mg 32Mg 33Mg" & _
    " 34Mg 35Mg 36Mg 37Mg 38Mg 39Mg 40Mg 21Al 22Al 23Al 24Al 25Al 26Al 27Al 28Al 29Al 30Al"

    StringIsotopes = StringIsotopes & _
    " 31Al 32Al 33Al 34Al 35Al 36Al 37Al 38Al 39Al 40Al 41Al 42Al 22Si 23Si 24Si 25Si 26Si" & _
    " 27Si 28Si 29Si 30Si 31Si 32Si 33Si 34Si 35Si 36Si 37Si 38Si 39Si 40Si 41Si 42Si 43Si" & _
    " 44Si 24P 25P 26P 27P 28P 29P 30P 31P 32P 33P 34P 35P 36P 37P 38P 39P 40P 41P 42P 43P" & _
    " 44P 45P 46P 26S 27S 28S 29S 30S 31S 32S 33S 34S 35S 36S 37S 38S 39S 40S 41S 42S 43S 44S" & _
    " 45S 46S 47S 48S 49S 28Cl 29Cl 30Cl 31Cl 32Cl 33Cl 34Cl 35Cl 36Cl 37Cl 38Cl 39Cl 40Cl" & _
    " 41Cl 42Cl 43Cl 44Cl 45Cl 46Cl 47Cl 48Cl 49Cl 50Cl 51Cl 30Ar 31Ar 32Ar 33Ar 34Ar 35Ar" & _
    " 36Ar 37Ar 38Ar 39Ar 40Ar 41Ar 42Ar 43Ar 44Ar 45Ar 46Ar 47Ar 48Ar 49Ar 50Ar 51Ar 52Ar" & _
    " 53Ar 32K 33K 34K 35K 36K 37K 38K 39K 40K 41K 42K 43K 44K 45K 46K 47K 48K 49K 50K 51K" & _
    " 52K 53K 54K 55K 34Ca 35Ca 36Ca 37Ca 38Ca 39Ca 40Ca 41Ca 42Ca 43Ca 44Ca 45Ca 46Ca 47Ca" & _
    " 48Ca 49Ca 50Ca 51Ca 52Ca 53Ca 54Ca 55Ca 56Ca 57Ca 36Sc 37Sc 38Sc 39Sc 40Sc 41Sc 42Sc" & _
    " 43Sc 44Sc 45Sc 46Sc 47Sc 48Sc 49Sc 50Sc 51Sc 52Sc 53Sc 54Sc 55Sc 56Sc 57Sc 58Sc 59Sc" & _
    " 60Sc 38Ti 39Ti 40Ti 41Ti 42Ti 43Ti 44Ti 45Ti 46Ti 47Ti 48Ti 49Ti 50Ti 51Ti 52Ti 53Ti" & _
    " 54Ti 55Ti 56Ti 57Ti 58Ti 59Ti 60Ti 61Ti 62Ti 63Ti 40V 41V 42V 43V 44V 45V 46V 47V 48V"

    StringIsotopes = StringIsotopes & _
    " 49V 50V 51V 52V 53V 54V 55V 56V 57V 58V 59V 60V 61V 62V 63V 64V 65V 42Cr 43Cr 44Cr 45Cr" & _
    " 46Cr 47Cr 48Cr 49Cr 50Cr 51Cr 52Cr 53Cr 54Cr 55Cr 56Cr 57Cr 58Cr 59Cr 60Cr 61Cr 62Cr 63Cr 64Cr" & _
    " 65Cr 66Cr 67Cr 44Mn 45Mn 46Mn 47Mn 48Mn 49Mn 50Mn 51Mn 52Mn 53Mn 54Mn 55Mn 56Mn 57Mn" & _
    " 58Mn 59Mn 60Mn 61Mn 62Mn 63Mn 64Mn 65Mn 66Mn 67Mn 68Mn 69Mn 45Fe 46Fe 47Fe 48Fe 49Fe" & _
    " 50Fe 51Fe 52Fe 53Fe 54Fe 55Fe 56Fe 57Fe 58Fe 59Fe 60Fe 61Fe 62Fe 63Fe 64Fe 65Fe 66Fe" & _
    " 67Fe 68Fe 69Fe 70Fe 71Fe 72Fe 47Co 48Co 49Co 50Co 51Co 52Co 53Co 54Co 55Co 56Co 57Co" & _
    " 58Co 59Co 60Co 61Co 62Co 63Co 64Co 65Co 66Co 67Co 68Co 69Co 70Co 71Co 72Co 73Co 74Co" & _
    " 75Co 48Ni 49Ni 50Ni 51Ni 52Ni 53Ni 54Ni 55Ni 56Ni 57Ni 58Ni 59Ni 60Ni 61Ni 62Ni 63Ni" & _
    " 64Ni 65Ni 66Ni 67Ni 68Ni 69Ni 70Ni 71Ni 72Ni 73Ni 74Ni 75Ni 76Ni 77Ni 78Ni 52Cu 53Cu" & _
    " 54Cu 55Cu 56Cu 57Cu 58Cu 59Cu 60Cu 61Cu 62Cu 63Cu 64Cu 65Cu 66Cu 67Cu 68Cu 69Cu 70Cu" & _
    " 71Cu 72Cu 73Cu 74Cu 75Cu 76Cu 77Cu 78Cu 79Cu 80Cu 54Zn 55Zn 56Zn 57Zn 58Zn 59Zn 60Zn" & _
    " 61Zn 62Zn 63Zn 64Zn 65Zn 66Zn 67Zn 68Zn 69Zn 70Zn 71Zn 72Zn 73Zn 74Zn 75Zn 76Zn 77Zn" & _
    " 78Zn 79Zn 80Zn 81Zn 82Zn 83Zn 56Ga 57Ga 58Ga 59Ga 60Ga 61Ga 62Ga 63Ga 64Ga 65Ga 66Ga"
    
    StringIsotopes = StringIsotopes & _
    " 67Ga 68Ga 69Ga 70Ga 71Ga 72Ga 73Ga 74Ga 75Ga 76Ga 77Ga 78Ga 79Ga 80Ga 81Ga 82Ga 83Ga" & _
    " 84Ga 85Ga 86Ga 58Ge 59Ge 60Ge 61Ge 62Ge 63Ge 64Ge 65Ge 66Ge 67Ge 68Ge 69Ge 70Ge 71Ge" & _
    " 72Ge 73Ge 74Ge 75Ge 76Ge 77Ge 78Ge 79Ge 80Ge 81Ge 82Ge 83Ge 84Ge 85Ge 86Ge 87Ge 88Ge" & _
    " 89Ge 60As 61As 62As 63As 64As 65As 66As 67As 68As 69As 70As 71As 72As 73As 74As 75As" & _
    " 76As 77As 78As 79As 80As 81As 82As 83As 84As 85As 86As 87As 88As 89As 90As 91As 92As" & _
    " 65Se 66Se 67Se 68Se 69Se 70Se 71Se 72Se 73Se 74Se 75Se 76Se 77Se 78Se 79Se 80Se 81Se" & _
    " 82Se 83Se 84Se 85Se 86Se 87Se 88Se 89Se 90Se 91Se 92Se 93Se 94Se 67Br 68Br 69Br 70Br" & _
    " 71Br 72Br 73Br 74Br 75Br 76Br 77Br 78Br 79Br 80Br 81Br 82Br 83Br 84Br 85Br 86Br 87Br" & _
    " 88Br 89Br 90Br 91Br 92Br 93Br 94Br 95Br 96Br 97Br 69Kr 70Kr 71Kr 72Kr 73Kr 74Kr 75Kr" & _
    " 76Kr 77Kr 78Kr 79Kr 80Kr 81Kr 82Kr 83Kr 84Kr 85Kr 86Kr 87Kr 88Kr 89Kr 90Kr 91Kr 92Kr" & _
    " 93Kr 94Kr 95Kr 96Kr 97Kr 98Kr 99Kr 100Kr 71Rb 72Rb 73Rb 74Rb 75Rb 76Rb 77Rb 78Rb 79Rb" & _
    " 80Rb 81Rb 82Rb 83Rb 84Rb 85Rb 86Rb 87Rb 88Rb 89Rb 90Rb 91Rb 92Rb 93Rb 94Rb 95Rb 96Rb" & _
    " 97Rb 98Rb 99Rb 100Rb 101Rb 102Rb 73Sr 74Sr 75Sr 76Sr 77Sr 78Sr 79Sr"

    StringIsotopes = StringIsotopes & _
    " 80Sr 81Sr 82Sr 83Sr 84Sr 85Sr 86Sr 87Sr 88Sr 89Sr 90Sr 91Sr 92Sr 93Sr 94Sr 95Sr 96Sr 97Sr" & _
    " 98Sr 99Sr 100Sr 101Sr 102Sr 103Sr 104Sr 105Sr 76Y 77Y 78Y 79Y 80Y 81Y 82Y 83Y 84Y 85Y 86Y" & _
    " 87Y 88Y 89Y 90Y 91Y 92Y 93Y 94Y 95Y 96Y 97Y 98Y 99Y 100Y 101Y 102Y 103Y 104Y 105Y 106Y 107Y" & _
    " 108Y 78Zr 79Zr 80Zr 81Zr 82Zr 83Zr 84Zr 85Zr 86Zr 87Zr 88Zr 89Zr 90Zr 91Zr 92Zr 93Zr 94Zr" & _
    " 95Zr 96Zr 97Zr 98Zr 99Zr 100Zr 101Zr 102Zr 103Zr 104Zr 105Zr 106Zr 107Zr 108Zr 109Zr 110Zr" & _
    " 81Nb 82Nb 83Nb 84Nb 85Nb 86Nb 87Nb 88Nb 89Nb 90Nb 91Nb 92Nb 93Nb 94Nb 95Nb 96Nb 97Nb 98Nb" & _
    " 99Nb 100Nb 101Nb 102Nb 103Nb 104Nb 105Nb 106Nb 107Nb 108Nb 109Nb 110Nb 111Nb 112Nb 113Nb" & _
    " 83Mo 84Mo 85Mo 86Mo 87Mo 88Mo 89Mo 90Mo 91Mo 92Mo 93Mo 94Mo 95Mo 96Mo 97Mo 98Mo 99Mo 100Mo" & _
    " 101Mo 102Mo 103Mo 104Mo 105Mo 106Mo 107Mo 108Mo 109Mo 110Mo 111Mo 112Mo 113Mo 114Mo 115Mo" & _
    " 85Tc 86Tc 87Tc 88Tc 89Tc 90Tc 91Tc 92Tc 93Tc 94Tc 95Tc 96Tc 97Tc 98Tc 99Tc 100Tc 101Tc 102Tc" & _
    " 103Tc 104Tc 105Tc 106Tc 107Tc 108Tc 109Tc 110Tc 111Tc 112Tc 113Tc 114Tc 115Tc 116Tc 117Tc 118Tc" & _
    " 87Ru 88Ru 89Ru 90Ru 91Ru 92Ru 93Ru 94Ru 95Ru 96Ru 97Ru 98Ru 99Ru 100Ru 101Ru 102Ru 103Ru 104Ru" & _
    " 105Ru 106Ru 107Ru 108Ru 109Ru 110Ru 111Ru 112Ru 113Ru 114Ru 115Ru 116Ru 117Ru 118Ru 119Ru 120Ru" & _
    " 89Rh 90Rh 91Rh 92Rh 93Rh 94Rh 95Rh 96Rh 97Rh 98Rh 99Rh 100Rh 101Rh 102Rh 103Rh 104Rh 105Rh" & _
    " 106Rh 107Rh 108Rh 109Rh 110Rh 111Rh 112Rh 113Rh 114Rh 115Rh 116Rh 117Rh 118Rh 119Rh 120Rh 121Rh" & _
    " 122Rh 91Pd 92Pd 93Pd 94Pd 95Pd 96Pd 97Pd 98Pd 99Pd 100Pd 101Pd 102Pd 103Pd 104Pd 105Pd 106Pd" & _
    " 107Pd 108Pd 109Pd 110Pd 111Pd 112Pd 113Pd 114Pd 115Pd 116Pd 117Pd 118Pd 119Pd 120Pd 121Pd 122Pd" & _
    " 123Pd 124Pd 93Ag 94Ag 95Ag 96Ag 97Ag 98Ag 99Ag 100Ag 101Ag 102Ag 103Ag 104Ag 105Ag 106Ag 107Ag" & _
    " 108Ag 109Ag 110Ag 111Ag 112Ag 113Ag 114Ag 115Ag 116Ag 117Ag 118Ag 119Ag 120Ag 121Ag 122Ag 123Ag" & _
    " 124Ag 125Ag 126Ag 127Ag 128Ag 129Ag 130Ag 95Cd 96Cd 97Cd 98Cd 99Cd 100Cd 101Cd 102Cd 103Cd 104Cd" & _
    " 105Cd 106Cd 107Cd 108Cd 109Cd 110Cd 111Cd 112Cd 113Cd 114Cd 115Cd 116Cd 117Cd 118Cd 119Cd 120Cd" & _
    " 121Cd 122Cd 123Cd 124Cd 125Cd 126Cd 127Cd 128Cd 129Cd 130Cd 131Cd 132Cd 97In 98In 99In 100In 101In 102In"
    
    StringIsotopes = StringIsotopes & _
    " 103In 104In 105In 106In 107In 108In 109In 110In 111In 112In 113In 114In 115In 116In 117In 118In" & _
    " 119In 120In 121In 122In 123In 124In 125In 126In 127In 128In 129In 130In 131In 132In 133In 134In" & _
    " 135In 99Sn 100Sn 101Sn 102Sn 103Sn 104Sn 105Sn 106Sn 107Sn 108Sn 109Sn 110Sn 111Sn 112Sn 113Sn" & _
    " 114Sn 115Sn 116Sn 117Sn 118Sn 119Sn 120Sn 121Sn 122Sn 123Sn 124Sn 125Sn 126Sn 127Sn 128Sn 129Sn" & _
    " 130Sn 131Sn 132Sn 133Sn 134Sn 135Sn 136Sn 137Sn 103Sb 104Sb 105Sb 106Sb 107Sb 108Sb 109Sb 110Sb" & _
    " 111Sb 112Sb 113Sb 114Sb 115Sb 116Sb 117Sb 118Sb 119Sb 120Sb 121Sb 122Sb 123Sb 124Sb 125Sb 126Sb" & _
    " 127Sb 128Sb 129Sb 130Sb 131Sb 132Sb 133Sb 134Sb 135Sb 136Sb 137Sb 138Sb 139Sb 105Te 106Te 107Te" & _
    " 108Te 109Te 110Te 111Te 112Te 113Te 114Te 115Te 116Te 117Te 118Te 119Te 120Te 121Te 122Te 123Te" & _
    " 124Te 125Te 126Te 127Te 128Te 129Te 130Te 131Te 132Te 133Te 134Te 135Te 136Te 137Te 138Te 139Te" & _
    " 140Te 141Te 142Te 108I 109I 110I 111I 112I 113I 114I 115I 116I 117I 118I 119I 120I 121I 122I 123I" & _
    " 124I 125I 126I 127I 128I 129I 130I 131I 132I 133I 134I 135I 136I 137I 138I 139I 140I 141I 142I 143I" & _
    " 144I 110Xe 111Xe 112Xe 113Xe 114Xe 115Xe 116Xe 117Xe 118Xe 119Xe 120Xe 121Xe 122Xe 123Xe 124Xe" & _
    " 125Xe 126Xe 127Xe 128Xe 129Xe 130Xe 131Xe 132Xe 133Xe 134Xe 135Xe 136Xe 137Xe 138Xe 139Xe 140Xe" & _
    " 141Xe 142Xe 143Xe 144Xe 145Xe 146Xe 147Xe 112Cs 113Cs 114Cs 115Cs 116Cs 117Cs 118Cs 119Cs 120Cs" & _
    " 121Cs 122Cs 123Cs 124Cs 125Cs 126Cs 127Cs 128Cs 129Cs 130Cs 131Cs 132Cs 133Cs 134Cs 135Cs 136Cs" & _
    " 137Cs 138Cs 139Cs 140Cs 141Cs 142Cs 143Cs 144Cs 145Cs 146Cs 147Cs 148Cs 149Cs 150Cs 151Cs 114Ba" & _
    " 115Ba 116Ba 117Ba 118Ba 119Ba 120Ba 121Ba 122Ba 123Ba 124Ba 125Ba 126Ba 127Ba 128Ba 129Ba 130Ba" & _
    " 131Ba 132Ba 133Ba 134Ba 135Ba 136Ba 137Ba 138Ba 139Ba 140Ba 141Ba 142Ba 143Ba 144Ba 145Ba 146Ba" & _
    " 147Ba 148Ba 149Ba 150Ba 151Ba 152Ba 153Ba 117La 118La 119La 120La 121La 122La 123La 124La 125La" & _
    " 126La 127La 128La 129La 130La 131La 132La 133La 134La 135La 136La 137La 138La 139La 140La 141La" & _
    " 142La 143La 144La 145La 146La 147La 148La 149La 150La 151La"
    
    StringIsotopes = StringIsotopes & _
    " 152La 153La 154La 155La 119Ce 120Ce 121Ce 122Ce 123Ce 124Ce 125Ce 126Ce 127Ce 128Ce 129Ce 130Ce" & _
    " 131Ce 132Ce 133Ce 134Ce 135Ce 136Ce 137Ce 138Ce 139Ce 140Ce 141Ce 142Ce 143Ce 144Ce 145Ce" & _
    " 146Ce 147Ce 148Ce 149Ce 150Ce 151Ce 152Ce 153Ce 154Ce 155Ce 156Ce 157Ce 121Pr 122Pr 123Pr" & _
    " 124Pr 125Pr 126Pr 127Pr 128Pr 129Pr 130Pr 131Pr 132Pr 133Pr 134Pr 135Pr 136Pr 137Pr 138Pr" & _
    " 139Pr 140Pr 141Pr 142Pr 143Pr 144Pr 145Pr 146Pr 147Pr 148Pr 149Pr 150Pr 151Pr 152Pr 153Pr" & _
    " 154Pr 155Pr 156Pr 157Pr 158Pr 159Pr 124Nd 125Nd 126Nd 127Nd 128Nd 129Nd 130Nd 131Nd 132Nd" & _
    " 133Nd 134Nd 135Nd 136Nd 137Nd 138Nd 139Nd 140Nd 141Nd 142Nd 143Nd 144Nd 145Nd 146Nd 147Nd" & _
    " 148Nd 149Nd 150Nd 151Nd 152Nd 153Nd 154Nd 155Nd 156Nd 157Nd 158Nd 159Nd 160Nd 161Nd 126Pm" & _
    " 127Pm 128Pm 129Pm 130Pm 131Pm 132Pm 133Pm 134Pm 135Pm 136Pm 137Pm 138Pm 139Pm 140Pm 141Pm" & _
    " 142Pm 143Pm 144Pm 145Pm 146Pm 147Pm 148Pm 149Pm 150Pm 151Pm 152Pm 153Pm 154Pm 155Pm 156Pm" & _
    " 157Pm 158Pm 159Pm 160Pm 161Pm 162Pm 163Pm 128Sm 129Sm 130Sm 131Sm 132Sm 133Sm 134Sm 135Sm" & _
    " 136Sm 137Sm 138Sm 139Sm 140Sm"
    
    StringIsotopes = StringIsotopes & _
    " 141Sm 142Sm 143Sm 144Sm 145Sm 146Sm 147Sm 148Sm 149Sm 150Sm 151Sm 152Sm 153Sm 154Sm 155Sm 156Sm" & _
    " 157Sm 158Sm 159Sm 160Sm 161Sm 162Sm 163Sm 164Sm 165Sm 130Eu 131Eu 132Eu 133Eu 134Eu 135Eu" & _
    " 136Eu 137Eu 138Eu 139Eu 140Eu 141Eu 142Eu 143Eu 144Eu 145Eu 146Eu 147Eu 148Eu 149Eu 150Eu" & _
    " 151Eu 152Eu 153Eu 154Eu 155Eu 156Eu 157Eu 158Eu 159Eu 160Eu 161Eu 162Eu 163Eu 164Eu 165Eu" & _
    " 166Eu 167Eu 134Gd 135Gd 136Gd 137Gd 138Gd 139Gd 140Gd 141Gd 142Gd 143Gd 144Gd 145Gd 146Gd" & _
    " 147Gd 148Gd 149Gd 150Gd 151Gd 152Gd 153Gd 154Gd 155Gd 156Gd 157Gd 158Gd 159Gd 160Gd 161Gd" & _
    " 162Gd 163Gd 164Gd 165Gd 166Gd 167Gd 168Gd 169Gd 136Tb 137Tb 138Tb 139Tb 140Tb 141Tb 142Tb" & _
    " 143Tb 144Tb 145Tb 146Tb 147Tb 148Tb 149Tb 150Tb 151Tb 152Tb 153Tb 154Tb 155Tb 156Tb 157Tb" & _
    " 158Tb 159Tb 160Tb 161Tb 162Tb 163Tb 164Tb 165Tb 166Tb 167Tb 168Tb 169Tb 170Tb 171Tb 138Dy" & _
    " 139Dy 140Dy 141Dy 142Dy 143Dy 144Dy 145Dy 146Dy 147Dy 148Dy 149Dy 150Dy 151Dy 152Dy 153Dy" & _
    " 154Dy 155Dy 156Dy 157Dy 158Dy 159Dy 160Dy 161Dy 162Dy 163Dy 164Dy 165Dy 166Dy 167Dy 168Dy" & _
    " 169Dy 170Dy 171Dy 172Dy"
    
    StringIsotopes = StringIsotopes & _
    " 173Dy 140Ho 141Ho 142Ho 143Ho 144Ho 145Ho 146Ho 147Ho 148Ho 149Ho 150Ho 151Ho 152Ho 153Ho" & _
    " 154Ho 155Ho 156Ho 157Ho 158Ho 159Ho 160Ho 161Ho 162Ho 163Ho 164Ho 165Ho 166Ho 167Ho" & _
    " 168Ho 169Ho 170Ho 171Ho 172Ho 173Ho 174Ho 175Ho 143Er 144Er 145Er 146Er 147Er 148Er" & _
    " 149Er 150Er 151Er 152Er 153Er 154Er 155Er 156Er 157Er 158Er 159Er 160Er 161Er 162Er" & _
    " 163Er 164Er 165Er 166Er 167Er 168Er 169Er 170Er 171Er 172Er 173Er 174Er 175Er 176Er" & _
    " 177Er 145Tm 146Tm 147Tm 148Tm 149Tm 150Tm 151Tm 152Tm 153Tm 154Tm 155Tm 156Tm 157Tm" & _
    " 158Tm 159Tm 160Tm 161Tm 162Tm 163Tm 164Tm 165Tm 166Tm 167Tm 168Tm 169Tm 170Tm 171Tm" & _
    " 172Tm 173Tm 174Tm 175Tm 176Tm 177Tm 178Tm 179Tm 148Yb 149Yb 150Yb 151Yb 152Yb 153Yb" & _
    " 154Yb 155Yb 156Yb 157Yb 158Yb 159Yb 160Yb 161Yb 162Yb 163Yb 164Yb 165Yb 166Yb 167Yb" & _
    " 168Yb 169Yb 170Yb 171Yb 172Yb 173Yb 174Yb 175Yb 176Yb 177Yb 178Yb 179Yb 180Yb 181Yb" & _
    " 182Yb 150Lu 151Lu 152Lu 153Lu 154Lu 155Lu 156Lu 157Lu 158Lu 159Lu 160Lu 161Lu 162Lu" & _
    " 163Lu 164Lu 165Lu 166Lu 167Lu 168Lu 169Lu 170Lu 171Lu 172Lu 173Lu 174Lu 175Lu 176Lu" & _
    " 177Lu 178Lu"
    
    StringIsotopes = StringIsotopes & _
    " 179Lu 180Lu 181Lu 182Lu 183Lu 184Lu 153Hf 154Hf 155Hf 156Hf 157Hf 158Hf 159Hf 160Hf 161Hf" & _
    " 162Hf 163Hf 164Hf 165Hf 166Hf 167Hf 168Hf 169Hf 170Hf 171Hf 172Hf 173Hf 174Hf 175Hf" & _
    " 176Hf 177Hf 178Hf 179Hf 180Hf 181Hf 182Hf 183Hf 184Hf 185Hf 186Hf 187Hf 188Hf 155Ta" & _
    " 156Ta 157Ta 158Ta 159Ta 160Ta 161Ta 162Ta 163Ta 164Ta 165Ta 166Ta 167Ta 168Ta 169Ta" & _
    " 170Ta 171Ta 172Ta 173Ta 174Ta 175Ta 176Ta 177Ta 178Ta 179Ta 180Ta 181Ta 182Ta 183Ta" & _
    " 184Ta 185Ta 186Ta 187Ta 188Ta 189Ta 190Ta 158W 159W 160W 161W 162W 163W 164W 165W" & _
    " 166W 167W 168W 169W 170W 171W 172W 173W 174W 175W 176W 177W 178W 179W 180W 181W 182W" & _
    " 183W 184W 185W 186W 187W 188W 189W 190W 191W 192W 160Re 161Re 162Re 163Re 164Re 165Re" & _
    " 166Re 167Re 168Re 169Re 170Re 171Re 172Re 173Re 174Re 175Re 176Re 177Re 178Re 179Re" & _
    " 180Re 181Re 182Re 183Re 184Re 185Re 186Re 187Re 188Re 189Re 190Re 191Re 192Re 193Re" & _
    " 194Re 162Os 163Os 164Os 165Os 166Os 167Os 168Os 169Os 170Os 171Os 172Os 173Os 174Os" & _
    " 175Os 176Os 177Os 178Os 179Os 180Os 181Os 182Os 183Os 184Os 185Os 186Os 187Os 188Os" & _
    " 189Os 190Os 191Os 192Os 193Os 194Os 195Os 196Os 164Ir 165Ir 166Ir 167Ir 168Ir 169Ir 170Ir" & _
    " 171Ir 172Ir 173Ir 174Ir 175Ir 176Ir 177Ir 178Ir 179Ir 180Ir 181Ir 182Ir 183Ir 184Ir 185Ir" & _
    " 186Ir 187Ir 188Ir 189Ir 190Ir 191Ir 192Ir 193Ir 194Ir 195Ir 196Ir 197Ir 198Ir 199Ir 166Pt" & _
    " 167Pt 168Pt 169Pt 170Pt 171Pt 172Pt 173Pt 174Pt 175Pt 176Pt 177Pt 178Pt 179Pt 180Pt 181Pt" & _
    " 182Pt 183Pt 184Pt 185Pt 186Pt 187Pt 188Pt 189Pt 190Pt 191Pt 192Pt 193Pt 194Pt 195Pt 196Pt" & _
    " 197Pt 198Pt 199Pt 200Pt 201Pt 202Pt 169Au 170Au 171Au 172Au 173Au 174Au 175Au 176Au 177Au" & _
    " 178Au 179Au 180Au 181Au 182Au 183Au 184Au 185Au 186Au 187Au 188Au 189Au 190Au 191Au 192Au" & _
    " 193Au 194Au 195Au 196Au 197Au 198Au 199Au 200Au 201Au 202Au 203Au 204Au 205Au 171Hg 172Hg" & _
    " 173Hg 174Hg 175Hg 176Hg 177Hg 178Hg 179Hg 180Hg 181Hg 182Hg 183Hg 184Hg 185Hg 186Hg 187Hg" & _
    " 188Hg 189Hg 190Hg 191Hg 192Hg 193Hg 194Hg 195Hg 196Hg 197Hg 198Hg 199Hg 200Hg 201Hg 202Hg" & _
    " 203Hg 204Hg 205Hg 206Hg 207Hg 208Hg 209Hg 210Hg 176Tl 177Tl 178Tl 179Tl 180Tl 181Tl 182Tl" & _
    " 183Tl 184Tl 185Tl 186Tl 187Tl 188Tl"
    
    StringIsotopes = StringIsotopes & _
    " 189Tl 190Tl 191Tl 192Tl 193Tl 194Tl 195Tl 196Tl 197Tl 198Tl 199Tl 200Tl 201Tl 202Tl 203Tl 204Tl" & _
    " 205Tl 206Tl 207Tl 208Tl 209Tl 210Tl 211Tl 212Tl 178Pb 179Pb 180Pb 181Pb 182Pb 183Pb 184Pb" & _
    " 185Pb 186Pb 187Pb 188Pb 189Pb 190Pb 191Pb 192Pb 193Pb 194Pb 195Pb 196Pb 197Pb 198Pb 199Pb" & _
    " 200Pb 201Pb 202Pb 203Pb 204Pb 205Pb 206Pb 207Pb 208Pb 209Pb 210Pb 211Pb 212Pb 213Pb 214Pb" & _
    " 215Pb 184Bi 185Bi 186Bi 187Bi 188Bi 189Bi 190Bi 191Bi 192Bi 193Bi 194Bi 195Bi 196Bi 197Bi" & _
    " 198Bi 199Bi 200Bi 201Bi 202Bi 203Bi 204Bi 205Bi 206Bi 207Bi 208Bi 209Bi 210Bi 211Bi 212Bi" & _
    " 213Bi 214Bi 215Bi 216Bi 217Bi 218Bi 219Bi 188Po 189Po 190Po 191Po 192Po 193Po 194Po 195Po" & _
    " 196Po 197Po 198Po 199Po 200Po 201Po 202Po 203Po 204Po 205Po 206Po 207Po 208Po 209Po 210Po" & _
    " 211Po 212Po 213Po 214Po 215Po 216Po 217Po 218Po 219Po 220Po 193At 194At 195At 196At 197At" & _
    " 198At 199At 200At 201At 202At 203At 204At 205At 206At 207At 208At 209At 210At 211At 212At" & _
    " 213At 214At 215At 216At 217At 218At 219At 220At 221At 222At 223At 195Rn 196Rn 197Rn 198Rn" & _
    " 199Rn 200Rn 201Rn 202Rn 203Rn"
    
    StringIsotopes = StringIsotopes & _
    " 204Rn 205Rn 206Rn 207Rn 208Rn 209Rn 210Rn 211Rn 212Rn 213Rn 214Rn 215Rn 216Rn 217Rn 218Rn 219Rn" & _
    " 220Rn 221Rn 222Rn 223Rn 224Rn 225Rn 226Rn 227Rn 228Rn 199Fr 200Fr 201Fr 202Fr 203Fr 204Fr" & _
    " 205Fr 206Fr 207Fr 208Fr 209Fr 210Fr 211Fr 212Fr 213Fr 214Fr 215Fr 216Fr 217Fr 218Fr 219Fr" & _
    " 220Fr 221Fr 222Fr 223Fr 224Fr 225Fr 226Fr 227Fr 228Fr 229Fr 230Fr 231Fr 232Fr 202Ra 203Ra" & _
    " 204Ra 205Ra 206Ra 207Ra 208Ra 209Ra 210Ra 211Ra 212Ra 213Ra 214Ra 215Ra 216Ra 217Ra 218Ra" & _
    " 219Ra 220Ra 221Ra 222Ra 223Ra 224Ra 225Ra 226Ra 227Ra 228Ra 229Ra 230Ra 231Ra 232Ra 233Ra" & _
    " 234Ra 206Ac 207Ac 208Ac 209Ac 210Ac 211Ac 212Ac 213Ac 214Ac 215Ac 216Ac 217Ac 218Ac 219Ac" & _
    " 220Ac 221Ac 222Ac 223Ac 224Ac 225Ac 226Ac 227Ac 228Ac 229Ac 230Ac 231Ac 232Ac 233Ac 234Ac" & _
    " 235Ac 236Ac 209Th 210Th 211Th 212Th 213Th 214Th 215Th 216Th 217Th 218Th 219Th 220Th 221Th" & _
    " 222Th 223Th 224Th 225Th 226Th 227Th 228Th 229Th 230Th 231Th 232Th 233Th 234Th 235Th 236Th" & _
    " 237Th 238Th 212Pa 213Pa 214Pa 215Pa 216Pa 217Pa 218Pa 219Pa 220Pa 221Pa 222Pa 223Pa 224Pa" & _
    " 225Pa 226Pa 227Pa 228Pa"
    
    StringIsotopes = StringIsotopes & _
    " 229Pa 230Pa 231Pa 232Pa 233Pa 234Pa 235Pa 236Pa 237Pa 238Pa 239Pa 240Pa 217U 218U 219U 220U 221U" & _
    " 222U 223U 224U 225U 226U 227U 228U 229U 230U 231U 232U 233U 234U 235U 236U 237U 238U 239U" & _
    " 240U 241U 242U 225Np 226Np 227Np 228Np 229Np 230Np 231Np 232Np 233Np 234Np 235Np 236Np 237Np" & _
    " 238Np 239Np 240Np 241Np 242Np 243Np 244Np 228Pu 229Pu 230Pu 231Pu 232Pu 233Pu 234Pu 235Pu" & _
    " 236Pu 237Pu 238Pu 239Pu 240Pu 241Pu 242Pu 243Pu 244Pu 245Pu 246Pu 247Pu 231Am 232Am 233Am" & _
    " 234Am 235Am 236Am 237Am 238Am 239Am 240Am 241Am 242Am 243Am 244Am 245Am 246Am 247Am 248Am" & _
    " 249Am 233Cm 234Cm 235Cm 236Cm 237Cm 238Cm 239Cm 240Cm 241Cm 242Cm 243Cm 244Cm 245Cm 246Cm" & _
    " 247Cm 248Cm 249Cm 250Cm 251Cm 252Cm 235Bk 236Bk 237Bk 238Bk 239Bk 240Bk 241Bk 242Bk 243Bk" & _
    " 244Bk 245Bk 246Bk 247Bk 248Bk 249Bk 250Bk 251Bk 252Bk 253Bk 254Bk 237Cf 238Cf 239Cf 240Cf" & _
    " 241Cf 242Cf 243Cf 244Cf 245Cf 246Cf 247Cf 248Cf 249Cf 250Cf 251Cf 252Cf 253Cf 254Cf 255Cf" & _
    " 256Cf 240Es 241Es 242Es 243Es 244Es 245Es 246Es 247Es 248Es 249Es 250Es 251Es 252Es 253Es" & _
    " 254Es 255Es 256Es 257Es"
    
    StringIsotopes = StringIsotopes & _
    " 258Es 242Fm 243Fm 244Fm 245Fm 246Fm 247Fm 248Fm 249Fm 250Fm 251Fm 252Fm 253Fm 254Fm 255Fm 256Fm" & _
    " 257Fm 258Fm 259Fm 260Fm 245Md 246Md 247Md 248Md 249Md 250Md 251Md 252Md 253Md 254Md 255Md" & _
    " 256Md 257Md 258Md 259Md 260Md 261Md 262Md 248No 249No 250No 251No 252No 253No 254No 255No" & _
    " 256No 257No 258No 259No 260No 261No 262No 263No 264No 251Lr 252Lr 253Lr 254Lr 255Lr 256Lr" & _
    " 257Lr 258Lr 259Lr 260Lr 261Lr 262Lr 263Lr 264Lr 265Lr 266Lr 253Rf 254Rf 255Rf 256Rf 257Rf" & _
    " 258Rf 259Rf 260Rf 261Rf 262Rf 263Rf 264Rf 265Rf 266Rf 267Rf 268Rf 255Db 256Db 257Db 258Db" & _
    " 259Db 260Db 261Db 262Db 263Db 264Db 265Db 266Db 267Db 268Db 269Db 270Db 258Sg 259Sg 260Sg" & _
    " 261Sg 262Sg 263Sg 264Sg 265Sg 266Sg 267Sg 268Sg 269Sg 270Sg 271Sg 272Sg 273Sg 260Bh 261Bh" & _
    " 262Bh 263Bh 264Bh 265Bh 266Bh 267Bh 268Bh 269Bh 270Bh 271Bh 272Bh 273Bh 274Bh 275Bh 263Hs" & _
    " 264Hs 265Hs 266Hs 267Hs 268Hs 269Hs 270Hs 271Hs 272Hs 273Hs 274Hs 275Hs 276Hs 277Hs 265Mt" & _
    " 266Mt 267Mt 268Mt 269Mt 270Mt 271Mt 272Mt 273Mt 274Mt 275Mt 276Mt 277Mt 278Mt 279Mt 267Ds" & _
    " 268Ds 269Ds 270Ds 271Ds 272Ds 273Ds 274Ds 275Ds 276Ds 277Ds 278Ds 279Ds 280Ds 281Ds 272Rg" & _
    " 273Rg 274Rg 275Rg 276Rg 277Rg 278Rg 279Rg 280Rg 281Rg 282Rg 283Rg 277Cn 278Cn 279Cn 280Cn" & _
    " 281Cn 282Cn 283Cn 284Cn 285Cn 283Nh 284Nh 285Nh 286Nh 287Nh 285Fl 286Fl 287Fl 288Fl 289Fl" & _
    " 287Mc 288Mc 289Mc 290Mc 291Mc 289Lv 290Lv 291Lv 292Lv 291Ts 292Ts 293Ts 294Ts 293Og"
    
    ArrayIsotopes = Split(StringIsotopes, " ")
    
    getIsotopes = ArrayIsotopes
    
End Function


Private Function CountChars(ByVal WorkPara As String, ByVal SearchString As String) As Integer
    
    Dim Count As Integer
    Dim Found As Integer

    Count = 0
    Found = InStr(WorkPara, SearchString)
    While Found <> 0
        Count = Count + 1
        Found = InStr(Found + 1, WorkPara, SearchString)
    Wend
    CountChars = Count
    
End Function

